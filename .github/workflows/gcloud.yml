name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

# https://cloud.google.com/blog/products/identity-security/enabling-keyless-authentication-from-github-actions
jobs:
    terraform-plan:
      # Add "id-token" with the intended permissions.
      runs-on: ubuntu-latest
      outputs:
        tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
  
      steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        # https://iam.googleapis.com/projects/944742483537/locations/global/workloadIdentityPools/my-pool/providers/my-provider
        with:
          workload_identity_provider: 'projects/944742483537/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: gh-559@huware-prep.iam.gserviceaccount.com
  
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
            version: '>= 416.0.0'
            install_components: 'alpha'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: 'Show big query datasets'
        run: gcloud alpha bq datasets list

      - name: Show currently assumed service account permissions
        run: gcloud projects get-iam-policy huware-prep --flatten="bindings[].members" --format='table(bindings.role)' --filter="bindings.members:gh-559@huware-prep.iam.gserviceaccount.com"

      - name: Show enabled APIs
        run: gcloud services list --enabled 

      - name: List installed components
        run: gcloud components list

      - name: Show project id
        run: gcloud projects describe $(gcloud config get-value core/project) --format=value\(projectNumber\)

      # nicked from https://github.com/Azure-Samples/terraform-github-actions/blob/main/.github/workflows/tf-plan-apply.yml

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
  
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
  
      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check
  
      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
  
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
          
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
          
      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        
      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
              })
                  
    terraform-apply:
      name: 'Terraform Apply'
      if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
      runs-on: ubuntu-latest
      needs: [terraform-plan]
      
      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
  
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
  
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
  
      # Download saved plan from artifacts  
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
  
      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan        